
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import javax.swing.table.AbstractTableModel;
import java.util.*;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestGui.java
 *
 * Created on Mar 14, 2009, 7:10:42 AM
 */

/**
 *
 * @author Raj
 */
public class TestGui extends javax.swing.JFrame {

    /** Creates new form TestGui */
    public TestGui(VehicleFleet fleet) {
        this.fleet=fleet;
        initComponents();
        setupDateBoxes();
        setDataSelected();
        dataTable.setAutoCreateRowSorter(true);
        setupCancelAction ();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        largeTextInput = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        rentButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        returnDamagedButton = new javax.swing.JButton();
        addVehicleButton = new javax.swing.JButton();
        vehicleStatusButton = new javax.swing.JButton();
        returnServiceButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        revenueButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        smallTextInput = new javax.swing.JTextField();
        enumInput = new javax.swing.JComboBox();
        smallTextLabel = new javax.swing.JLabel();
        enumLabel = new javax.swing.JLabel();
        enumLabel2 = new javax.swing.JLabel();
        enumInput2 = new javax.swing.JComboBox();
        smallTextLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textConsol = new javax.swing.JEditorPane();
        smallTextInput3 = new javax.swing.JTextField();
        smallTextInput4 = new javax.swing.JTextField();
        smallTextInput5 = new javax.swing.JTextField();
        smallTextInput6 = new javax.swing.JTextField();
        smallTextLabel3 = new javax.swing.JLabel();
        smallTextLabel4 = new javax.swing.JLabel();
        smallTextLabel5 = new javax.swing.JLabel();
        smallTextLabel6 = new javax.swing.JLabel();
        month1 = new javax.swing.JComboBox();
        year1 = new javax.swing.JComboBox();
        month2 = new javax.swing.JComboBox();
        year2 = new javax.swing.JComboBox();
        monthLabel1 = new javax.swing.JLabel();
        yearLabel1 = new javax.swing.JLabel();
        monthLabel2 = new javax.swing.JLabel();
        yearLabel2 = new javax.swing.JLabel();
        day = new javax.swing.JComboBox();
        dayLabel = new javax.swing.JLabel();
        sday2 = new javax.swing.JComboBox();
        sdayLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        enumInput3 = new javax.swing.JComboBox();
        otherButton = new javax.swing.JButton();

        largeTextInput.setColumns(20);
        largeTextInput.setRows(5);
        jScrollPane3.setViewportView(largeTextInput);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Burtz Car Rental");
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(750, 550));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 550));

        rentButton.setText("Rent Vehicle");
        rentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Return Vehicle");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        returnDamagedButton.setText("Add Damage Report");
        returnDamagedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnDamagedButtonActionPerformed(evt);
            }
        });

        addVehicleButton.setText("Add Vehicle");
        addVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVehicleButtonActionPerformed(evt);
            }
        });

        vehicleStatusButton.setText("Change Vehicle Status");
        vehicleStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleStatusButtonActionPerformed(evt);
            }
        });

        returnServiceButton.setText("Return from Service");
        returnServiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnServiceButtonActionPerformed(evt);
            }
        });

        reportButton.setText("Vehicle Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        revenueButton.setText("Revenue Report");
        revenueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revenueButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(188, 244, 244));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Vin", "Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        dataTable.setMaximumSize(new java.awt.Dimension(400, 400));
        dataTable.getTableHeader().setReorderingAllowed(false);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dataTable);

        smallTextInput.setText("jTextField1");

        enumInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        smallTextLabel.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel.setText("jLabel1");

        enumLabel.setBackground(new java.awt.Color(188, 244, 244));
        enumLabel.setText("VIN");

        enumLabel2.setBackground(new java.awt.Color(188, 244, 244));
        enumLabel2.setText("Type");

        enumInput2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        smallTextLabel2.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel2.setText("jLabel2");

        jScrollPane4.setBackground(new java.awt.Color(188, 244, 244));
        jScrollPane4.setViewportView(textConsol);

        smallTextInput3.setText("jTextField1");

        smallTextInput4.setText("jTextField2");

        smallTextInput5.setText("jTextField3");

        smallTextInput6.setText("jTextField4");

        smallTextLabel3.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel3.setText("jLabel1");

        smallTextLabel4.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel4.setText("jLabel2");

        smallTextLabel5.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel5.setText("jLabel3");

        smallTextLabel6.setBackground(new java.awt.Color(188, 244, 244));
        smallTextLabel6.setText("jLabel4");

        month1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        year1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        month2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        year2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        monthLabel1.setBackground(new java.awt.Color(188, 244, 244));
        monthLabel1.setText("Expire");

        yearLabel1.setBackground(new java.awt.Color(188, 244, 244));
        yearLabel1.setText("/");

        monthLabel2.setBackground(new java.awt.Color(188, 244, 244));
        monthLabel2.setText("/");

        yearLabel2.setBackground(new java.awt.Color(188, 244, 244));
        yearLabel2.setText("/");

        day.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dayLabel.setBackground(new java.awt.Color(188, 244, 244));
        dayLabel.setText("Date");

        sday2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        sdayLabel.setBackground(new java.awt.Color(188, 244, 244));
        sdayLabel.setText("Start");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        enumInput3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        otherButton.setText("Other Bu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enumLabel)
                            .addComponent(smallTextLabel)
                            .addComponent(smallTextLabel2)
                            .addComponent(smallTextLabel3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(enumInput, 0, 180, Short.MAX_VALUE)
                                    .addComponent(smallTextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(smallTextInput3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(enumInput3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(smallTextLabel6)
                                    .addComponent(smallTextLabel5)
                                    .addComponent(smallTextLabel4)
                                    .addComponent(enumLabel2))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(smallTextInput4, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(enumInput2, 0, 180, Short.MAX_VALUE)
                                    .addComponent(smallTextInput5, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(smallTextInput6, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(sdayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(sday2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(month1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(year1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dayLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(month2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(year2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(returnServiceButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(addVehicleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(rentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(returnDamagedButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(vehicleStatusButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(reportButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(revenueButton, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(otherButton)
                                    .addComponent(okButton)
                                    .addComponent(cancelButton)
                                    .addComponent(saveButton))))
                        .addGap(246, 246, 246))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addVehicleButton, reportButton, returnButton, returnDamagedButton, revenueButton, vehicleStatusButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton, otherButton, saveButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {enumInput, enumInput2, enumInput3, smallTextInput, smallTextInput3, smallTextInput4, smallTextInput5, smallTextInput6});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rentButton, returnServiceButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jScrollPane4});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enumInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enumLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smallTextLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enumInput3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smallTextLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallTextInput3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smallTextLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enumInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enumLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallTextInput4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smallTextLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallTextInput5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smallTextLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallTextLabel6)
                            .addComponent(smallTextInput6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sdayLabel)
                    .addComponent(sday2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthLabel1)
                    .addComponent(month1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLabel1)
                    .addComponent(year1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayLabel)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthLabel2)
                    .addComponent(month2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLabel2)
                    .addComponent(year2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton)
                        .addGap(16, 16, 16)
                        .addComponent(otherButton)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnDamagedButton))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addVehicleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vehicleStatusButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnServiceButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(revenueButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {day, dayLabel, month1, month2, monthLabel1, monthLabel2, sday2, sdayLabel, year1, year2, yearLabel1, yearLabel2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnDamagedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnDamagedButtonActionPerformed
        if (!returningVehicle) {
            // regular case
            setupReturnServiceVehicleAction(false);
        } else {
            // only used when Rental is being returned
            setupDamagedRentalVehicleAction();
        }
}//GEN-LAST:event_returnDamagedButtonActionPerformed

    private void revenueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revenueButtonActionPerformed
        setupRevenueReport();
}//GEN-LAST:event_revenueButtonActionPerformed

    private void addVehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVehicleButtonActionPerformed
       setupAddVehicleAction();
    }//GEN-LAST:event_addVehicleButtonActionPerformed

    private void vehicleStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleStatusButtonActionPerformed
        setupVehicleStatusAction();
    }//GEN-LAST:event_vehicleStatusButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setupCancelAction();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void returnServiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnServiceButtonActionPerformed
        setupReturnServiceVehicleAction(true);
    }//GEN-LAST:event_returnServiceButtonActionPerformed

    private void rentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentButtonActionPerformed
        setupRentVehicleAction();
    }//GEN-LAST:event_rentButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        setupReturnVehicleAction(false);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
                int selectedRow=dataTable.getSelectedRow();
                boolean editable=false;
                Vehicle tVehicle=null;

                if (selectedRow !=-1) {
                    String vin=(String)dataTable.getValueAt(selectedRow, 0);
                    tVehicle=fleet.getVehicle(vin.trim());
                    if (tVehicle!=null) {
                        displayInfo(tVehicle.toString());
 
                        // select vin in the enumeration box safely
                        if (enumInput.isEditable()) {
                            editable = true;
                            enumInput.setEditable(false);
                        }
                        enumInput.setSelectedItem(vin.trim());
                        if (editable) {
                            enumInput.setEditable(true);
                            editable = false;
                        }

                        if (enumInput2.isEditable()) {
                            editable = true;
                            enumInput2.setEditable(false);
                        }
                        enumInput2.setSelectedItem(vin.trim());
                        if (editable) {
                            enumInput2.setEditable(true);
                        }

                        enumInput2.setEditable(false);

                        enumInput2.setSelectedItem(vin.trim());
                    }
                }
    }//GEN-LAST:event_dataTableMouseClicked

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        setupVehicleReport();
    }//GEN-LAST:event_reportButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            dbSaveFleet();
        } catch (BadDatabaseInsertException errorString) {
            displayError("Problems loading data\n"+errorString+"\n", Color.LIGHT_GRAY);
        } catch (SQLException errorString) {
            displayError("Problems loading data\n"+errorString+"\n", Color.LIGHT_GRAY);
        }catch (BadInputException errorString) {
            displayError("Problems loading data\n"+errorString+"\n", Color.LIGHT_GRAY);
        }
}//GEN-LAST:event_saveButtonActionPerformed

    /**
     * code to disable the buttons which select which operation to run
     */
    public void disableControlSelection () {
        rentButton.setEnabled(false);
        returnButton.setEnabled(false);
        returnDamagedButton.setEnabled(false);
        addVehicleButton.setEnabled(false);
        vehicleStatusButton.setEnabled(false);
        returnServiceButton.setEnabled(false);
        reportButton.setEnabled(false);
        revenueButton.setEnabled(false);
    // RAJ    addVehicleTypeButton.setEnabled(false);
    // RAJ    addCorpCreditCardButton.setEnabled(false);
    // RAJ    editCorpCreditCardButton.setEnabled(false);
        otherButton.setEnabled(false);
     // RAJ   monthlyRReport.setEnabled(false);
     // RAJ   monthlyVReportButton.setEnabled(false);
        returnDamagedButton.setVisible(false);
    }
       /**
     * code to enable the buttons which select which operation to run
     */
    public void enableControlSelection () {
        rentButton.setEnabled(true);
        returnButton.setEnabled(true);
     //  returnDamagedButton.setEnabled(true);
        returnDamagedButton.setVisible(false);
        addVehicleButton.setEnabled(true);
        vehicleStatusButton.setEnabled(true);
        returnServiceButton.setEnabled(true);
        reportButton.setEnabled(true);
        revenueButton.setEnabled(true);
    // RAJ    addVehicleTypeButton.setEnabled(true);
     // RAJ   addCorpCreditCardButton.setEnabled(true);
     // RAJ   editCorpCreditCardButton.setEnabled(true);
        otherButton.setEnabled(false);
     // RAJ   monthlyRReport.setEnabled(true);
     // RAJ   monthlyVReportButton.setEnabled(true);
    }

    public void setInputInvisisble() {
        smallTextInput.setVisible(false);
        smallTextLabel.setVisible(false);
        smallTextInput3.setVisible(false);
        smallTextLabel3.setVisible(false);
        smallTextInput4.setVisible(false);
        smallTextLabel4.setVisible(false);
        smallTextInput5.setVisible(false);
        smallTextLabel5.setVisible(false);
        smallTextInput6.setVisible(false);
        smallTextLabel6.setVisible(false);
        largeTextInput.setVisible(false);
        enumInput.setVisible(false);
        enumLabel.setVisible(false);
        enumInput3.setVisible(false);
        smallTextLabel2.setVisible(false);
        enumInput2.setVisible(false);
        enumLabel2.setVisible(false);
        month1.setVisible(false);
        month2.setVisible(false);
        year1.setVisible(false);
        year2.setVisible(false);
        day.setVisible(false);
        monthLabel1.setVisible(false);
        monthLabel2.setVisible(false);
        yearLabel1.setVisible(false);
        yearLabel2.setVisible(false);
        dayLabel.setVisible(false);
        sday2.setVisible(false);
        sdayLabel.setVisible(false);
        otherButton.setVisible(false);
    }

    public void setInputVisisble() {
        smallTextInput.setVisible(true);
        smallTextLabel.setVisible(true);
        smallTextInput3.setVisible(true);
        smallTextLabel3.setVisible(true);
        smallTextInput4.setVisible(true);
        smallTextLabel4.setVisible(true);
        smallTextInput5.setVisible(true);
        smallTextLabel5.setVisible(true);
        smallTextInput6.setVisible(true);
        smallTextLabel6.setVisible(true);
        largeTextInput.setVisible(true);
        enumInput.setVisible(true);
        enumLabel.setVisible(true);
        enumInput3.setVisible(true);
        smallTextLabel2.setVisible(true);
        enumInput2.setVisible(true);
        enumLabel2.setVisible(true);
        month1.setVisible(true);
        month2.setVisible(true);
        year1.setVisible(true);
        year2.setVisible(true);
        day.setVisible(true);
        monthLabel1.setVisible(true);
        monthLabel2.setVisible(true);
        yearLabel1.setVisible(true);
        yearLabel2.setVisible(true);
        dayLabel.setVisible(true);
        otherButton.setVisible(false);

     }

    public void stepHomeScreen() {
        okButton.setEnabled(false);
        cancelButton.setEnabled(false);
        setInputInvisisble();

        enableControlSelection();
    }

    /**
     * Pre lay out the information in the date boxes
     */
    public void setupDateBoxes() {
        // empty the comboBoxes
        month1.removeAllItems();
        month2.removeAllItems();
        day.removeAllItems();
        sday2.removeAllItems();
        year1.removeAllItems();
        year2.removeAllItems();

        // fill the date boxes with 1 - 12 for months
        //                          2008 - 2019 for years
        //                          1 - 31 for days

        for (int i=1; i<13; i++) {
            month1.addItem(Integer.valueOf(i));
            month2.addItem(Integer.valueOf(i));
            year1.addItem(Integer.valueOf(i+2007));
            year2.addItem(Integer.valueOf(i+2007));
        }

        for (int i=1; i<32;i++) {
            day.addItem(Integer.valueOf(i));
            sday2.addItem(Integer.valueOf(i));
        }

        // ensure the values can not be changed
        month1.setEditable(false);
        month2.setEditable(false);
        day.setEditable(false);
        sday2.setEditable(false);
        year1.setEditable(false);
        year2.setEditable(false);
    }

    public void setDataSelected () {
        GregorianCalendar gC=new GregorianCalendar ();
        int year = gC.get(Calendar.YEAR)-2009+1;
        int day1 = gC.get(Calendar.DATE);
        int month = gC.get(Calendar.MONTH);

        month1.setSelectedIndex(month);
        month2.setSelectedIndex(month);
        day.setSelectedIndex(day1);
        sday2.setSelectedIndex(day1);
        year1.setSelectedIndex(year);
        year2.setSelectedIndex(year);
    }

    Date getSelectedDate (int year, int month, int inDay) {
        GregorianCalendar gC = new GregorianCalendar();
        DateFormat fmt = DateFormat.getDateInstance(DateFormat.SHORT);
        String testValid;
        int cDay = inDay;
        if (cDay == -1) cDay=1;
        gC.set(year,month-1,cDay);

        testValid=fmt.format(gC.getTime());

        return gC.getTime();
    }


    public void setupCancelAction () {

        setInputInvisisble();
        enableControlSelection();

        dataTable.setRowHeight(normalHeight);
        okButton.setEnabled(false);
        okButton.setText("OK");
        saveButton.setText("Save");
        displayMessage("");

        // if the fleet is not empty redisplay the default vehicle table
        if (fleet.getVehicles() !=null) {
            dataTable.setModel(new VehicleTableModel(fleet.getVehicles()));
        }

    }

    class VehicleTableModel extends AbstractTableModel {
       private ArrayList<Vehicle> tableVehicle;

       // copy the data into the table model
       public VehicleTableModel(ArrayList<Vehicle> cars) {
           tableVehicle=cars;
       }

       public int getRowCount () { return tableVehicle.size();}

       public int getColumnCount() {return 3;}

       public Object getValueAt (int r, int c) {
           String value=new String();
           Vehicle car=tableVehicle.get(r);
           switch (c) {
               case 0:
                   value=car.getVehicleId();
                   break;
               case 1:
                   value=car.getVehicleType().getName();
                   break;
               case 2:
                   value=car.getStatus().name();
                   break;

           }
           return value;
       }

       public String getColumnName(int c) {
           String value=new String();
           switch (c) {
               case 0:
                   value="VIN";
                   break;
               case 1:
                   value="Type";
                   break;
               case 2:
                   value="Status";
                   break;
           }
           return value;

       }

    }
    class CreditCardTableModel extends AbstractTableModel {
       private ArrayList<CreditCard> tableCreditCard;

       // copy the data into the table model
       public CreditCardTableModel(ArrayList<CreditCard> card) {
           tableCreditCard=card;
       }

       public int getRowCount () { return tableCreditCard.size();}

       public int getColumnCount() {return 2;}

       public Object getValueAt (int r, int c) {
           String value=new String();
           CreditCard card=tableCreditCard.get(r);
           switch (c) {
               case 0:
                   value=card.getName();
                   break;
               case 1:
                   value=card.getNumber();
                   break;
           }
           return value;
       }

       public String getColumnName(int c) {
           String value=new String();
           switch (c) {
               case 0:
                   value="Company";
                   break;
               case 1:
                   value="Card Number";
                   break;
           }
           return value;

       }

    }

/**
 * This class implements a model to display a Bill for a rental a table
 *
 **/
class BillTableModel extends AbstractTableModel {
    private String[][] cells= {{"Vehicle","","*"},{"StartMile","EndMile","TotlaMile"},{"*","*","*"},
    {"StartDate","EndDate","TotalDays"},{"*","*","*"},{"TotalDays","DailyRate","Rental"},{"*","*","*"},
    {"ExcessMiles","MileageRate","MileageCharge"},{"*","*","*"},{"Gallons","GasRate","FillCharge"},
    {"*","*","*"},{"","DamageCharge","*"},{"","Deposit","*"},{"Total Charge","","*"}
    };
    private int numRows=14;
    private int numColumns=3;

       // copy the data into the table model
       public BillTableModel(Bill bill, Vehicle vehicle, double milesAllowed, double mileageRate,
               double gasRate) {
           DateFormat fmt=DateFormat.getDateInstance(DateFormat.MEDIUM);
           NumberFormat nFmt=NumberFormat.getCurrencyInstance();
           double excessMiles=bill.getEndMileage()-bill.getStartMileage()-bill.getDaysRented()*milesAllowed;

           if (excessMiles<0) excessMiles=0;

           cells[0][2]=vehicle.getVehicleId();
           // Miles trvaled
           cells[2][0]=String.format("%9.2f", bill.getStartMileage());
           cells[2][1]=String.format("%9.2f", bill.getEndMileage());
           cells[2][2]=String.format("%9.2f", bill.getEndMileage()-bill.getStartMileage());
           // Dates with vehicle
           cells[4][0]=fmt.format(bill.getStartDate());
           cells[4][1]=fmt.format(bill.getEndDate());
           cells[4][2]=String.format("%3.0f",bill.getDaysRented()+1); // day count;
           // Rental cost
           cells[6][0]=String.format("%3.0f",bill.getDaysRented()+1); // day count;
           cells[6][1]=nFmt.format(bill.getDailyRate());
           cells[6][2]=nFmt.format(bill.getDailyRate()*(bill.getDaysRented()+1));
           // mileage charge
           cells[8][0]=String.format("%8.2f",excessMiles );
           cells[8][1]=nFmt.format(mileageRate);
           cells[8][2]=nFmt.format(mileageRate*excessMiles);
           // gas charge
           cells[10][0]=String.format("%5.2f",bill.getGasAdded());
           cells[10][1]=nFmt.format(gasRate);
           cells[10][2]=nFmt.format(gasRate*bill.getGasAdded());
           // damage charge
           cells[11][2]=nFmt.format(bill.getDamageCost());
           // deposit
           cells[12][2]=nFmt.format(bill.getDeposit());
           // Total Charge
           cells[13][2]=nFmt.format(bill.getTotalFee()-bill.getDeposit());
       }

       public int getRowCount () { return numRows;}

       public int getColumnCount() {return numColumns;}

       public Object getValueAt (int r, int c) {
           return cells[r][c];
       }

       public String getColumnName(int c) {
           return "";
       }

    }
/**
 * This class implements a model to display a Bill for a rental a table
 *
 **/
class VehicleReportTableModel extends AbstractTableModel {
    private ArrayList<String> labels=new ArrayList<String>();
    private ArrayList<String> values=new ArrayList<String>();
    private int numRows=6;
    private int numColumns=2;

    public void setColumnLabels () {
        labels.add("VIN");
        labels.add("Vehicle Type");
        labels.add("Mileage");
        labels.add("Last Service");
        labels.add("Damage");

        // pad out the list with blanks for the extra damage reports
        for (int i=5; i<=values.size();i++) {
            labels.add("");
        }

        labels.add("Status");
    }
       // copy the data into the table model   
       public VehicleReportTableModel(Vehicle vehicle) {
           DateFormat fmt=DateFormat.getDateInstance(DateFormat.MEDIUM);
           NumberFormat nFmt=NumberFormat.getCurrencyInstance();
           String lastService=null;
           
           if (vehicle.getLastServiced()==null) {
               lastService="None";
           } else {
               lastService=vehicle.getLastServiced().toString();
           }

           values.add(vehicle.getVehicleId());
           values.add(vehicle.getVehicleType().getName());
           values.add(String.format("%8.2f", vehicle.getCurrentMilage()));
           values.add(lastService);

           // deal with the possibility of no damage
           // otherwise fill them in
           if (vehicle.getDamageReport().size()<1) {
               values.add("None");
           } else {
               for (CostReport d:vehicle.getDamageReport())
                   values.add(d.toString());
           }

           // add vehicle status
           values.add(vehicle.getStatus().toString());

           setColumnLabels();

       }

       public int getRowCount () { return numRows;}

       public int getColumnCount() {return numColumns;}

       public Object getValueAt (int r, int c) {
           String returnString=null;
           switch (c) {
               case 0:
                   returnString=labels.get(r);
                   break;
               case 1:
                   returnString=values.get(r);
                   break;

           }
           return returnString;
       }

       public String getColumnName(int c) {
           return "";
       }

    }

/**
 * This class implements a model to display the fleet revenu in the table
 **/
class FleetRevenueTableModel extends AbstractTableModel {
    private ArrayList<String> vin =new ArrayList<String>();
    private ArrayList<String> daysRented = new ArrayList<String>();
    private ArrayList<String> revenue = new ArrayList<String>();
    
    private int numColumns=3;

       // copy the data into the ArrayLists for the table
       public FleetRevenueTableModel(ArrayList<Vehicle> fleet, Date startDate, Date endDate) {
           DateFormat fmt=DateFormat.getDateInstance(DateFormat.MEDIUM);
           NumberFormat nFmt=NumberFormat.getCurrencyInstance();
           
           double inRevenue=0;
           double totalRevenue=0;
           int inDaysRented=0;
           int totalDaysRented=0;

           // fill in the vehicle information skipping vehicles with no value
           for (Vehicle v:fleet) {
               inDaysRented=v.getDaysRented(startDate,endDate);
               inRevenue=v.getRevenue(startDate, endDate);

               if (inRevenue !=0 || inDaysRented !=0) {
                    vin.add(v.getVehicleId().trim());
                    daysRented.add(String.valueOf(inDaysRented));
                    revenue.add(nFmt.format(inRevenue));
                    totalRevenue+=inRevenue;
                    totalDaysRented+=inDaysRented;
               }
           }

           vin.add("Total");
           daysRented.add(String.valueOf(totalDaysRented));
           revenue.add(nFmt.format(totalRevenue));
       }

       public int getRowCount () { return vin.size();}

       public int getColumnCount() {return numColumns;}

       public Object getValueAt (int r, int c) {
           String returnString=null;
           switch (c) {
               case 0:
                   returnString=vin.get(r);
                   break;
                   
               case 1:
                   returnString=daysRented.get(r);
                   break;
               case 2:
                   returnString = revenue.get(r);
                   break;
           }
           return returnString;
       }

       public String getColumnName(int c) {
           switch (c) {
               case 0:
                   return "VIN";
                   
               case 1:
                   return "Days Rented";
               case 2:
                   return "Revenue";
           }
           return "";
       }

    }

    class MonthlyRevenueTableModel extends AbstractTableModel {
        private int month = -1;
        private int year = -1;
        private String report = null;

        public MonthlyRevenueTableModel(int month, int year, String report) {
                this.month=month;
                this.year=year;
                this.report=report;
        }

        public int getRowCount() {
            return 1;
        }

       public int getColumnCount() {return 1;}

        public Object getValueAt (int r, int c) {
            return report;
        }
        @Override
        public String getColumnName (int c) {
            return "Revenue Report for "+year+"/"+month;
        }
    }
    
     class MonthlyVehicleTableModel extends AbstractTableModel {
        private int month = -1;
        private int year = -1;
        private String vin=null;
        private String report = null;

        public MonthlyVehicleTableModel(int month, int year, String vin,String report) {
                this.month=month;
                this.year=year;
                this.report=report;
                this.vin=vin;
        }

        public int getRowCount() {
            return 1;
        }

       public int getColumnCount() {return 1;}

        public Object getValueAt (int r, int c) {
            return report;
        }
        @Override
        public String getColumnName (int c) {
            return "Vehicle Report for Vehicle "+vin+" for "+year+"/"+month;
        }
    }

    /**
     * This method implements the adding of a vehicle to the fleet
     * first it disables all the control buttons
     * redifine the data input area
     *
     */
    public void setupAddVehicleAction () {
        // define what to do when the user wants to add the vehicl
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean error=false;
                String vin=null;
                double mileage=-1;
                VehicleType type=null;
                try {
                    vin = smallTextInput.getText().trim();
                    mileage = Double.valueOf(smallTextInput3.getText());
                    type=(VehicleType) enumInput.getSelectedItem();
                    fleet.addVehicle(vin,type,mileage);
                } catch (BadInputException errorString) {
                    displayError("Error on input can not add veicle\n" + errorString+"\n",Color.MAGENTA);
                    error=true;
                } catch (CanNotChangeStatusException errorString) {
                    displayError("Error can not change vehicle status to Available" + errorString+"\n",Color.MAGENTA);
                    error=true;
                } catch (NumberFormatException errorString) {
                    displayError("Mileage must only include numbers  \n" + errorString+"\n",Color.MAGENTA);
                    error=true;
                }

                if (! error) {
                    displayMessage("New vehicle add to fleet with vin " +vin+"\n" );
                    dataTable.repaint();
                    setupCancelAction();
                }

            }
        };

       // disable the controll buttons
       disableControlSelection();

       // make all the input boxes invisible
       setInputInvisisble();
       // Set the ones used visible
        smallTextLabel.setVisible(true);
        smallTextInput.setVisible(true);
        smallTextInput3.setVisible(true);
        smallTextLabel3.setVisible(true);
        enumInput.setVisible(true);
        enumLabel.setVisible(true);

       // set the input labeles
       smallTextLabel.setText("Vin");
       enumLabel.setText("Vehicle Type");
       smallTextLabel3.setText("Mileage");
       smallTextInput.setText("");
       smallTextInput3.setText("");

       // remove old values in the enumInput
       enumInput.removeAllItems();
       // load all possible values in the enum box
       for (VehicleType vt: fleet.getVehicleType()) {
           enumInput.addItem(vt);
       }

       // set the okay action
       okButton.setText("Save Vehicle");
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
       // the cancel buuton always clears the boxes and exists without saving

       // enable entry in all the input areas
       smallTextInput.setEnabled(true);
       enumInput.setEnabled(true);
       smallTextInput3.setEnabled(true);

       // set editable for all the input areas
       smallTextInput.setEditable(true);
       smallTextInput3.setEditable(true);
       // Can not edit the entries of the enumberation box
       enumInput.setEditable(false);

       okButton.setEnabled(true);

    }


    public void setupAddVehicleTypeAction () {
        // define what to do when the user wants to add the vehicl
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean error=false;
                double rate=-1;
                VehicleType vType=null;
                String type=null;
                String option=null;
                try {
                    rate = Double.valueOf(smallTextInput.getText());
                    type=(String) enumInput.getSelectedItem();
                    option=(String) enumInput2.getSelectedItem();
                    fleet.addVehicleType(type, option, rate);
                } catch (BadInputException errorString) {
                    displayError("Error on input can not add veicle type \n" + errorString+"\n",Color.MAGENTA);
                    error=true;
                } catch (NumberFormatException errorString) {
                    displayError("Rate must only include numbers\n" + errorString+"\n",Color.MAGENTA);
                    error=true;
                }

                if (! error) {
                    displayMessage("New vehicle Type added to fleet: " +type+" " +option+"\n");
                    dataTable.repaint();
                         // remove the old listener for the enumInput
                    for (ActionListener al : enumInput.getActionListeners())
                        enumInput.removeActionListener(al);
                    setupCancelAction();
                }

            }
        };

        ActionListener typeSelect=new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String type=null;

                if (enumInput.getSelectedIndex()>=0) {
                    type = (String) enumInput.getSelectedItem();

                    // empty the list
                    enumInput2.removeAllItems();

                    // change iput label
                    enumLabel2.setText(type + " option:");

                    // load the enumInput2 list of already used options
                    // first load None option - even if it already exists in the list
                    enumInput2.addItem("None");
                    // load the rest remove the None if it exits as an option already

                    for (VehicleType vt : fleet.getVehicleType()) {
                        if (vt.getType().equalsIgnoreCase(type))
                            enumInput2.addItem(vt.getOption());
                    }
                }
            }
        };

       // disable the controll buttons
       disableControlSelection();

       // make all the input boxes invisible
       setInputInvisisble();
       // Set the ones used visible
        smallTextLabel.setVisible(true);
        smallTextInput.setVisible(true);
        enumInput.setVisible(true);
        enumLabel.setVisible(true);
        enumInput2.setVisible(true);
        enumLabel2.setVisible(true);

       // set the input labeles
       smallTextLabel.setText("Rate");
       enumLabel.setText("Vehicle Type");
       enumLabel2.setText("Vehicle Option");
//       smallTextLabel2.setText("Mileage");
       smallTextInput.setText("");
//       enumInput3.setText("");

       // remove old values in the enumInput
       enumInput.removeAllItems();
       // load all possible values in the enum box
       enumInput.addItem("Edit New Type");
       for (VehicleType vt: fleet.getVehicleType()) {
           boolean found = false;
           for (int i=0;i<enumInput.getItemCount();i++){
               if ((vt.getType().equalsIgnoreCase((String)enumInput.getItemAt(i)))) found=true;
           }
           if (!found) enumInput.addItem(vt.getType());

       }
       enumInput2.removeAllItems();
       enumInput2.addItem("None");
       
       // remove the old listener for the enumInput 
        for (ActionListener al : enumInput.getActionListeners())
           enumInput.removeActionListener(al);
       // add the action to change enumInput2
       enumInput.addActionListener(typeSelect);

       // set the okay action
       okButton.setText("Save New Vehicle Type");
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
       // the cancel buuton always clears the boxes and exists without saving

       // enable entry in all the input areas
       smallTextInput.setEnabled(true);
       enumInput.setEnabled(true);
        enumInput2.setEnabled(true);
       //       enumInput3.setEnabled(true);

       // set editable for all the input areas
       smallTextInput.setEditable(true);
//       enumInput3.setEditable(true);
       // Can not edit the entries of the enumberation box
        enumInput.setEditable(true);
        enumInput2.setEditable(true);

       okButton.setEnabled(true);

    }

     public void setupAddCorperateCreditCardAction () {
        // define what to do when the user wants to add the vehicl
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String cCNumber=null;
                String company=null;
                try {
                    int inYear=year2.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    company=(String) enumInput2.getSelectedItem();
                    cCNumber=smallTextInput4.getText();

                    if (inYear==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be enteed");

                    Date expireDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),28);

                    // Add new corperate Credit Card
                    fleet.addCorperateCreditCard(company,cCNumber, expireDate);

                } catch (BadInputException errorString) {
                    displayError("Bad input value " +errorString+"\n",Color.yellow);
                    fail= true;
                } catch (NumberFormatException errorString) {
                    displayError("Dates must only include numbers  " + errorString+"\n",Color.yellow);
                    fail=true;
                }

                if (! fail) {
                    displayMessage("Added new Credit Card for "+company+ " number: " +
                            CreditCard.formatCreditCardNumber(cCNumber)+"\n");
                    dataTable.repaint();
                    setupCancelAction();
                }

            }
        };

       // disable the controll buttons
         disableControlSelection();

       // make all the input boxes Invisible
         setInputInvisisble();

       // set the input labeles
         monthLabel2.setText("Expire mm/yyyy");
         yearLabel2.setText("/");
         enumLabel2.setText("Company Name");

         smallTextLabel4.setText("Credit Card Number");

       // set the text in the date input to the current date
         smallTextInput4.setText("");
         smallTextInput5.setText("");
       // set current date in the date box
         setDataSelected();

       // remove old values in the enumInput
         enumInput2.removeAllItems();
       // load all possible Company Names in the enum box
         for (CreditCard c : fleet.getCorperateCardList()) {
           boolean found = false;
           for (int i=0;i<enumInput2.getItemCount();i++){
               if ((c.getName().equalsIgnoreCase((String)enumInput2.getItemAt(i)))) found=true;
           }
           if (!found) enumInput2.addItem(c.getName());
         }
         // set the okay action

         okButton.setText("Add Credit Card");

       // clear ok action listeners
         for (ActionListener al : okButton.getActionListeners())
             okButton.removeActionListener(al);
         // add the addVehicle action listener

         okButton.addActionListener(okAction);

       // the cancel buuton always clears the boxes and exists without saving

       // set editable for all the input areas
       smallTextInput4.setEditable(true);
       // Can not edit the entries of the enumeration box
       enumInput2.setEditable(true);

       monthLabel2.setVisible(true);
       yearLabel2.setVisible(true);
       enumLabel2.setVisible(true);
       smallTextLabel4.setVisible(true);
  
       // set the text in the date input to the current date
       smallTextInput4.setVisible(true);

       enumInput2.setVisible(true);
       month2.setVisible(true);
       year2.setVisible(true);

       okButton.setEnabled(true);

       dataTable.setModel(new CreditCardTableModel(fleet.getCorperateCardList()));

    }

    public void setupEditCorperateCreditCardAction() {
        // define what to do when the user wants to add the vehicl
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String company = (String) enumInput.getSelectedItem();
                String number=(String) enumInput2.getSelectedItem();

                try {
                    int inYear=year2.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();

                    if (inYear==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be enteed");

                    Date expireDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),28);

                    // Add new corperate Credit Card
                    fleet.modifyCorperateCreditCard(company,number, expireDate);

                } catch (BadInputException errorString) {
                    displayError("Bad input value " +errorString+"\n",Color.yellow);
                    fail= true;
                } catch (NumberFormatException errorString) {
                    displayError("Dates must only include numbers  \n" + errorString+"\n",Color.yellow);
                    fail=true;
                }

                if (! fail) {
                    displayMessage("Modified expirey date for credit card for "+company+ " number: " 
                            +CreditCard.formatCreditCardNumber(number)+"\n");
                    for (ActionListener al : enumInput.getActionListeners())
                        enumInput.removeActionListener(al);
                    dataTable.repaint();
                    setupCancelAction();
                }

            }
        };

        ActionListener selectCompany=new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String company = (String) enumInput.getSelectedItem();

                // empty the list
                enumInput2.removeAllItems();

                // load the enumInput2 list of card numbers for the company
                for (CreditCard cc : fleet.getCorperateCardList()) {
                    if (cc.getName().equalsIgnoreCase(company))
                        enumInput2.addItem(CreditCard.formatCreditCardNumber(cc.getNumber()));
                }
            }
        };

        ActionListener deleteAction=new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                boolean fail=false;
                // get the company and card number
                String company = (String) enumInput.getSelectedItem();
                String number=(String) enumInput2.getSelectedItem();

                // do popup thing to ensure that this is what you want????
                // remove the credit card from the list
                try  {
                    fleet.deleteCorperateCreditCard(company, number);
                } catch (BadInputException errorM) {
                    displayError("Can not delete corperate credit card : "+company + " "+
                            CreditCard.formatCreditCardNumber(number)+"\n"+
                            "because " +errorM +"\n",Color.RED);
                    fail=true;
                }
                // update card number window?
                if (!fail) {
                    displayMessage("Removed Corperate Credit Card : "+company+" " +
                            CreditCard.formatCreditCardNumber(number)+"\n");
                    for (ActionListener al : enumInput.getActionListeners())
                        enumInput.removeActionListener(al);
                    dataTable.repaint();
                    setupCancelAction();
                }
            }
        };

       // disable the controll buttons
         disableControlSelection();

       // make all the input boxes Invisible
         setInputInvisisble();

       // set the input labeles
        monthLabel2.setText("Expire mm/yyyy");
        yearLabel2.setText("/");
        enumLabel.setText("Company Name");
        enumLabel2.setText("Credit Card Number");

        // set current date in the date box
        setDataSelected();

        // remove old values in the enumInput
        enumInput2.removeAllItems();
        enumInput.removeAllItems();
        // load all possible Company Names in the enum box
        for (CreditCard c : fleet.getCorperateCardList()) {
            boolean found = false;
            for (int i = 0; i < enumInput.getItemCount(); i++) {
                if ((c.getName().equalsIgnoreCase((String) enumInput.getItemAt(i)))) {
                    found = true;
                }
            }
            if (!found) {
                enumInput.addItem(c.getName());
            }
        }
        for (ActionListener al: enumInput.getActionListeners())
            enumInput.removeActionListener(al);
        enumInput.addActionListener(selectCompany);

        // set the okay action and save action
        okButton.setText("Change Credit Card");
        saveButton.setText("Delete Credit Card");

       // clear ok action listeners
        for (ActionListener al : okButton.getActionListeners())
            okButton.removeActionListener(al);
         // add the addVehicle action listener
        okButton.addActionListener(okAction);
        // clear delete action listeners
        for (ActionListener al : saveButton.getActionListeners())
            saveButton.removeActionListener(al);
        saveButton.addActionListener(deleteAction);

        // the cancel buuton always clears the boxes and exists without saving

        // set editable for all the input areas
        // Can not edit the entries of the enumeration box
        enumInput2.setEditable(false);
        enumInput.setEditable(false);

        monthLabel2.setVisible(true);
        yearLabel2.setVisible(true);
        enumLabel2.setVisible(true);
        enumLabel.setVisible(true);

        // set the text in the date input to the current dat
        enumInput2.setVisible(true);
        enumInput.setVisible(true);
        month2.setVisible(true);
        year2.setVisible(true);

        okButton.setEnabled(true);

        dataTable.setModel(new CreditCardTableModel(fleet.getCorperateCardList()));
    }

      /**
     * This method implements the changing of a vehicle's status
     * first it disables all the control buttons
     * redifine the data input area
     *
     */
    public void setupVehicleStatusAction () {
        // define what to do when the user wants to add the vehicl
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                int vStatus=enumInput2.getSelectedIndex();
                int vinId=enumInput.getSelectedIndex();
                String vin=(String)enumInput.getSelectedItem();
                VehicleStatus vs=VehicleStatus.valueOf(enumInput2.getSelectedItem().toString());
                
                try {
                    fleet.changeVehicleStatus(vin.trim(),vs );
                } catch (BadInputException errorString) {
                    displayError("Bad input Vehicle VIN " + vin +
                            "Does not exist in the fleet\n",Color.CYAN);
                    fail= true;
                } catch (CanNotChangeStatusException errorString) {
                    displayError("Can not change the status to " +vs+"\n", Color.CYAN);
                    fail= true;
                }
                if (!fail) {
                    displayMessage("Changed vehicle status of "+vin+" to "+ vs+"\n");
                    dataTable.repaint();
                    setupCancelAction();
                }
                    
            }
        };

       // disable the controll buttons
       disableControlSelection();
       setInputInvisisble();

       // set the input labeles
       enumLabel.setText("VIN");
       enumLabel2.setText("Vehicle Status");

       // remove old values in the enumInput
       enumInput2.removeAllItems();
       // load all possible values in the enum box
       for (VehicleStatus vs: VehicleStatus.values()) {
           // Can not allow a rental this way
           if (vs != VehicleStatus.RENTED)
               enumInput2.addItem(vs);
       }

       enumInput.removeAllItems();
       // load all valid VIN from fleet
       for (Vehicle v:fleet.getVehicles())
           if (v.checkStatus(VehicleStatus.AVAILABLE) || v.checkStatus(VehicleStatus.UNAVAILABLE))
               enumInput.addItem(v.getVehicleId());

       // if datatable has a row selection select the same in enumInput
        enumInput.setEditable(false);
        if (dataTable.getSelectedRow() != -1) {
           String vin=(String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
           enumInput.setSelectedItem(vin.trim());
       }

       // set the okay action
       okButton.setText("Change Vehicle Status");
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
       // the cancel buuton always clears the boxes and exists without saving

       // enable entry in all the input areas
       enumInput.setEnabled(true);
       enumInput2.setEnabled(true);

       // Can not edit the entries of the enumberation box
       enumInput2.setEditable(false);
       enumInput.setEditable(false);
       enumInput.setVisible(true);
       enumInput2.setVisible(true);
       enumLabel.setVisible(true);
       enumLabel2.setVisible(true);

        okButton.setEnabled(true);
    }

 
    /**
     * Takes a String with a date encoded in it and converts it to a Date using the Locale format
     * @param dateString input data
     * @return the Date dateString represents
     */
    public Date inputDate(String dateString) throws ParseException{
        // get the format
        DateFormat fmt=DateFormat.getDateInstance(DateFormat.SHORT);
        fmt.setLenient(false);
        return fmt.parse(dateString);
        
    }

    /**
     * Handlse the adding of CostReports to unRented cars
     * @param service if true this produces a serviceReport otherwise a damageReport
     */
     public void setupReturnServiceVehicleAction (boolean service) {
        // define what to do when the user wants to add the vehicl
        ActionListener okServiceAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String vin=null;
                try {
                    int inYear=year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    vin=(String) enumInput2.getSelectedItem();

                    if (inYear==-1 || inDay ==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be enteed");

                    Date returnDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    Double cost = Double.valueOf(smallTextInput5.getText());

                    // build the cost report from the boxes
                    CostReport serviceReport = new CostReport(returnDate, smallTextInput4.getText(), cost);

                        fleet.returnVehicleFromService(vin.trim(), serviceReport);

                } catch (BadInputException errorString) {
                    displayError("Bad input value " +errorString+"\n",Color.yellow);
                    fail= true;
                } catch (CanNotChangeStatusException errorString) {
                    displayError("Can not change status "+errorString+"\n",Color.yellow);
                    fail= true;
                } catch (NumberFormatException errorString) {
                    displayError("Cost must only include numbers  \n" + errorString+"\n",Color.yellow);
                    fail=true;
                }

                if (! fail) {
                    displayMessage("Returned vehicle "+vin+" from service.  Now has status AVAILABLE"+"\n");
                    dataTable.repaint();
                    setupCancelAction();
                }

            }
        };
          ActionListener okDamageAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String vin=null;
                try {
                    int inYear=year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    vin=(String) enumInput2.getSelectedItem();

                    if (inYear==-1 || inDay ==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be enteed");

                    Date returnDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    Double cost = Double.valueOf(smallTextInput5.getText());

                    // build the cost report from the boxes
                    CostReport serviceReport = new CostReport(returnDate, smallTextInput4.getText(), cost);

                    fleet.addDamageReport(vin.trim(), serviceReport);

                } catch (BadInputException errorString) {
                    displayError("Bad input value " +errorString+"\n",Color.blue);
                    fail= true;
                } catch (NumberFormatException errorString) {
                    displayError("Cost must only include numbers  \n" + errorString+"\n",Color.blue);
                    fail=true;
                }

                if (! fail) {
                    displayMessage("Vehicle "+vin+" has a been reported damageed.  Now has a status of " +
                            "Unavailable until returned from service\n");
                    dataTable.repaint();
                    setupCancelAction();
                }

            }
        };

       // disable the controll buttons
       disableControlSelection();

       // make all the input boxes Invisible
       setInputInvisisble();

       // set the input labeles
       dayLabel.setText("Date dd/mm/yyyy");
       monthLabel2.setText("/");
       yearLabel2.setText("/");
       enumLabel2.setText("Vin");
       if (service) {
           smallTextLabel4.setText("Service Description");
       }else {
           smallTextLabel4.setText("Damage Description");
       }
       smallTextLabel5.setText("Cost");
       // set the text in the date input to the current date
       smallTextInput4.setText("");
       smallTextInput5.setText("");
       // set current date in the date box
         setDataSelected();

       // remove old values in the enumInput
       enumInput2.removeAllItems();
       // load all possible vehicles in the enum box
       for (Vehicle v: fleet.getVehicles()) {
           if (service) {
               // only insert vehicles that are UNAVAILABLE
               if (v.checkStatus(VehicleStatus.UNAVAILABLE))
                   enumInput2.addItem(v.getVehicleId().trim());
           } else {
               // only not allowed to add damamge to DELETED Vehicles and Rented Vehicle
               if (!v.checkStatus(VehicleStatus.DELETED) && ! v.checkStatus(VehicleStatus.RENTED))
                   enumInput2.addItem(v.getVehicleId().trim());
           }
       }

       // select the enumInput2 element that is the same as selected in dataTable
       enumInput2.setEditable(false);
       if (dataTable.getSelectedRow() != -1) {
           String vin = (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
           enumInput2.setSelectedItem(vin.trim());
       }

       // set the okay action
       if (service) {
           okButton.setText("Add Service Report");
       } else {
           okButton.setText("Add Damage Report");
       }
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       if (service) {
           okButton.addActionListener(okServiceAction);
       }else {
           okButton.addActionListener(okDamageAction);
       }
       // the cancel buuton always clears the boxes and exists without saving

       // set editable for all the input areas
       smallTextInput4.setEditable(true);
       smallTextInput5.setEditable(true);
       // Can not edit the entries of the enumeration box
       enumInput2.setEditable(false);

       dayLabel.setVisible(true);
       monthLabel2.setVisible(true);
       yearLabel2.setVisible(true);
       enumLabel2.setVisible(true);
       smallTextLabel4.setVisible(true);
       smallTextLabel5.setVisible(true);
       // set the text in the date input to the current date
       smallTextInput4.setVisible(true);
       smallTextInput5.setVisible(true);
       enumInput2.setVisible(true);
       month2.setVisible(true);
       day.setVisible(true);
       year2.setVisible(true);

       okButton.setEnabled(true);

    }

     /**
      * Restores the the GUI to previous states
      */
     private void restoreReturnVehicle() {
// resort the old values
//         smallTextLabel4.setText(returnBackUp.get("label4"));
//         smallTextLabel5.setText(returnBackUp.get("label5"));
//         smallTextLabel6.setText(returnBackUp.get("label6"));
//         smallTextInput4.setText(returnBackUp.get("input4"));
//         smallTextInput5.setText(returnBackUp.get("input5"));
//         smallTextInput6.setText(returnBackUp.get("input6"));
//   //      day.setSelectedItem(returnBackUp.get("day"));
//   //      month2.setSelectedItem(returnBackUp.get("month"));
//   //      year2.setSelectedItem(returnBackUp.get("year"));
//         okButton.setText(returnBackUp.get("ok"));
//
//         // restore the OK button action
////         for (ActionListener al : okActions) {
////             okButton.addActionListener(al);
////         }
//         setInputVisisble();
//         enumInput2.setVisible(false);
//         enumLabel2.setVisible(false);
//
//         dataTable.repaint();
         setupReturnVehicleAction(true);
     }

    /**
     * Handlse the adding of Damage Reports to Rented cars
     */
     public void setupDamagedRentalVehicleAction () {

         // store the gui states of the Items this will user
         returnBackUp=new HashMap<String,String>();
         returnBackUp.put("label4", smallTextLabel4.getText());
         returnBackUp.put("label5", smallTextLabel5.getText());
         returnBackUp.put("label6", smallTextLabel6.getText());
         returnBackUp.put("input4", smallTextInput4.getText());
         returnBackUp.put("input5", smallTextInput5.getText());
         returnBackUp.put("input6", smallTextInput6.getText());
 //        returnBackUp.put("day",    day.getSelectedIndex());
//        returnBackUp.put("month",  month2.getSelectedIndex());
//        returnBackUp.put("year",   year2.getSelectedIndex());
         returnBackUp.put("ok",   okButton.getText());

        // define what to do when the user wants to add the vehicl

          ActionListener okDamageAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                try {
                    int inYear=year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    String vin=(String) enumInput2.getSelectedItem();

                    if (inYear==-1 || inDay ==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be enteed");

                    Date returnDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    Double cost = Double.valueOf(smallTextInput5.getText());

                    // build the cost report from the boxes
                    CostReport serviceReport = new CostReport(returnDate, smallTextInput4.getText(), cost);

                    damageReport=serviceReport;

                } catch (BadInputException errorString) {
                    displayError("Bad input value " +errorString+"\n",Color.red);
                    fail= true;
                } catch (NumberFormatException errorString) {
                    displayError("Cost must only include numbers  \n" + errorString+"\n",Color.red);
                    fail = true;
                }
                if (! fail) {
                    restoreReturnVehicle();
                }

            }
        };
        ActionListener tempCancel =new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                restoreReturnVehicle();
            }
        };

       // disable the controll buttons
       disableControlSelection();

       // make all the input boxes Invisible
       setInputInvisisble();

       // set the input labeles
       dayLabel.setText("Date dd/mm/yyyy");
       monthLabel2.setText("/");
       yearLabel2.setText("/");
       enumLabel2.setText("Vin");

       smallTextLabel4.setText("Damage Description");

       smallTextLabel5.setText("Cost");
       // set the text in the date input to the current date
       smallTextInput4.setText("");
       smallTextInput5.setText("");
       // set current date in the date box
       setDataSelected();


         // set the okay action
         okButton.setText("Add Damage Report");

         // clear ok action listeners and back them up
         for (ActionListener al : okButton.getActionListeners()) {
       //      okActions.add(al);
             okButton.removeActionListener(al);
         }
         // add the addVehicle action listener
         okButton.addActionListener(okDamageAction);

         // clear the 1 actionListener for the cancel button
         for (ActionListener al: cancelButton.getActionListeners())
             cancelButton.removeActionListener(al);
         cancelButton.addActionListener(tempCancel);

       // remove old values in the enumInput
       enumInput2.removeAllItems();
       // load all possible vehicles in the enum box
       enumInput2.setEditable(true);
       if (enumInput.getSelectedIndex() !=-1) {
           enumInput2.setSelectedItem(enumInput.getSelectedItem());
       } else {
           // bail out because there is no vehicle yet choosen to be returned
           restoreReturnVehicle();
       }
       enumInput2.setEditable(false);

       // set editable for all the input areas
       smallTextInput4.setEditable(true);
       smallTextInput5.setEditable(true);

       dayLabel.setVisible(true);
       monthLabel2.setVisible(true);
       yearLabel2.setVisible(true);
       enumLabel2.setVisible(true);
       smallTextLabel4.setVisible(true);
       smallTextLabel5.setVisible(true);
       // set the text in the date input to the current date
       smallTextInput4.setVisible(true);
       smallTextInput5.setVisible(true);
       enumInput2.setVisible(true);
       month2.setVisible(true);
       day.setVisible(true);
       year2.setVisible(true);

       okButton.setEnabled(true);

    }

   
     /**
      * Gui to implement the Renting of the vehicle
      */
     public void setupRentVehicleAction () {

        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String vin=null;
                String custName=null;
                try {

                    int inYear = year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    int inYearE=year1.getSelectedIndex();
                    int inMonthE=month1.getSelectedIndex();
                    Date startDate=null;
                    Date expire=null;
                    custName=smallTextInput4.getText().trim();
                    String cCName=(String)enumInput3.getSelectedItem();
                    String phone=smallTextInput5.getText().trim();

                    String cCnumber=smallTextInput3.getText().trim();
                    String dLicinse=smallTextInput6.getText().trim();
                    vin=(String) enumInput.getSelectedItem();
                    Double startMileage=Double.valueOf(smallTextInput.getText());
                    long phnoeN=Long.parseLong(phone);
                    CreditCard newCC=null;
                    DriverLicense newDL=null;
                    CustomerInformation newCI=null;
                    DateFormat dfmt=DateFormat.getDateInstance(DateFormat.SHORT);

// get the date form the gui
                    if (inYear==-1 || inDay ==-1 || inMonth==-1 || inYearE == -1 || inMonthE == -1)
                        throw new BadInputException("All date values must be enteed");

                    startDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    expire=getSelectedDate((Integer)year1.getItemAt(inYearE),(Integer) month1.getItemAt(inMonthE),1);

                    if (!fleet.vehicleIdExists(vin.trim())) throw new BadInputException ("Bad Vin "+ vin);
                    if (fleet.getVehicle(vin.trim()).getCurrentMilage()> startMileage && startMileage != 0)
                        throw new BadInputException ("Bad start Mileage (less than current Mileage) "
                                + startMileage);

                    // build Credit Card, Drivers License, and Customer
                    // is the cCName and cCnumber in the corperate credit card list?
                                       // deal with corperate credit cards
                    if (enumInput3.getSelectedIndex()>0) {
                        // State using corperate credit card
                        displayMessage("Paying Rental Deposit with Corperate Credit Card \n"+cCName+" "+
                                CreditCard.formatCreditCardNumber(cCnumber)+"\n");
                        // validate that the company and number exist on 1 card
                        if (!fleet.corperateCardExists(cCName, cCnumber)) {
                            throw new BadInputException ("Corperate Card does not exist for Company "+
                                    cCName +" and Card Number " + CreditCard.formatCreditCardNumber(cCnumber));
                        }
                        //get expire from corperate card
                        CreditCard tc=fleet.getCorperateCreditCard(cCName, cCnumber, custName);
                        cCName=tc.getName();
                        expire=tc.getExpire();
                        displayMessage("Expire - " + dfmt.format(expire) + "\n");
                    }
                    
                    newCC=new CreditCard(cCName, cCnumber, expire);
                    newDL=new DriverLicense(custName, "XX", dLicinse, expire);
                    newCI = new CustomerInformation(custName, phnoeN, newDL, newCC);
                    
// show credit Card is valid
                    if (!showValidCreditCard(newCC, 100))
                        throw new CanNotValidateCreditCardException ("$100.00");
                    fleet.rentVehicle(vin.trim(), newCI, startMileage, startDate);

                } catch (CanNotValidateCreditCardException errorString) {
                    displayError("Can Not Validate Credit Card " +errorString+"\n",Color.ORANGE);
                    fail=true;
                } catch (BadInputException errorString) {
                    displayError("Error on Input " +errorString+"\n",Color.ORANGE);
                    fail=true;
                } catch (CanNotChangeStatusException errorString) {
                    displayError("Can Not change vehicle Status " + errorString+"\n",Color.ORANGE);
                    fail=true;
                } catch (NumberFormatException errorString) {
                    displayError("Phone and Mileage must only include numbers  \n" + errorString+"\n",Color.ORANGE);
                    fail=true;
                }

                if (!fail) {

                    displayMessage("Rented Vehicle "+vin+" to "+custName+"\n");
                // reset the screen and get credit card data
                    for (ActionListener aL:enumInput.getActionListeners())
                        enumInput.removeActionListener(aL);
                    for (ActionListener aL:enumInput2.getActionListeners())
                        enumInput2.removeActionListener(aL);

                    setupCancelAction();
                }
            }
        };

        /**
         * Select vehicle by type or Available
         */
         ActionListener typeAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                enumInput.removeAllItems();
                String vType=null;
                String vOption=null;
                VehicleType selectType=null;
                // load all Vins
                if (enumInput2.getSelectedIndex() ==0) {
                    for (Vehicle v: fleet.getVehicles())
                        if (v.getStatus() == VehicleStatus.AVAILABLE)
                            enumInput.addItem(v.getVehicleId().trim());
//                    for (Vehicle v: fleet.getVehicleByAvalible())
//                        enumInput.addItem(v.getVehicleId());
                } else {
                    // load Vins for only vehicles which are available and of that type
                    selectType=(VehicleType) enumInput2.getSelectedItem();
                    vType=selectType.getType();
                    vOption=selectType.getOption();
                    for (Vehicle v:fleet.getVehicleByType(vType,vOption)) {
                        if (v.getStatus() == VehicleStatus.AVAILABLE)
                            enumInput.addItem(v.getVehicleId().trim());
                    }
                }

            }
        };

        ActionListener vehicleSelectAction= new ActionListener() {

         public void actionPerformed(ActionEvent e) {
             // if a vehicle is selected
             if (enumInput.getSelectedIndex() != -1 ) {
                 String fieldName=(String)enumInput.getSelectedItem();
                 if (fieldName!=null && !fieldName.equalsIgnoreCase("Edit New Type")) {
                     smallTextInput.setText(fleet.getVehicle(fieldName).getCurrentMilage().toString());
                 }
             } 

            }
        };

       // disable the controll buttons
       disableControlSelection();

       // make all the input boxes invisible until setup
       setInputInvisisble();
       // do not use largeInput so reset


         // set the input labeles
         smallTextLabel.setText("Mileage");
         smallTextLabel2.setText("Credit Name / Company");
         smallTextLabel3.setText("Credit Card Number");
         smallTextLabel4.setText("Customer Name");
         smallTextLabel5.setText("Phone Number");
         smallTextLabel6.setText("Drivers License Code");
         enumLabel.setText("VIN");
         enumLabel2.setText("Vehicle Type");
         monthLabel1.setText("Expire ");
         yearLabel1.setText("/");
         dayLabel.setText("Start ");
         monthLabel2.setText("/");
         yearLabel2.setText("/");

// clrea all input fields
         smallTextInput.setText("");
         smallTextInput3.setText((""));
         smallTextInput4.setText((""));
         smallTextInput5.setText((""));
         smallTextInput6.setText((""));
       setDataSelected();

       // remove old values in the enumInput and enumnInput2
       enumInput.removeAllItems();
       enumInput2.removeAllItems();
       enumInput3.removeAllItems();
       // load all possible values in the enum box
       for (Vehicle v: fleet.getVehicles()) {
           if (v.checkStatus(VehicleStatus.AVAILABLE))
               enumInput.addItem(v.getVehicleId().trim());
       }

       enumInput3.addItem("Enter Card Holder Name");
       for (CreditCard cc: fleet.getCorperateCardList()) {
           boolean found=false;
           for (int i =0;i<enumInput3.getItemCount();i++) {
               if (cc.getName().equalsIgnoreCase((String)enumInput3.getItemAt(i)))
                   found=true;
           }
           if (!found) {
               enumInput3.addItem(cc.getName());
           }
       }
       enumInput3.setEditable(true);

       // get selection from datatable if exists and is relavant
         enumInput.setEditable(false);
       if (dataTable.getSelectedRow() != -1) {
           String vin = (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
           enumInput.setSelectedItem(vin.trim());
       }

       //load enumInput2 with the first element being All
       enumInput2.addItem("All");
       // then load the vehicle types
       for (VehicleType vt: fleet.getVehicleType()){
           enumInput2.addItem(vt);
       }
       // when an element is selected in enumInput2 it affects enumInput1
       enumInput2.addActionListener(typeAction);
       enumInput.addActionListener(vehicleSelectAction);

       // set the okay action
       okButton.setText("Process Rental");
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
       // the cancel buuton always clears the boxes and exists without saving

       // set editable for all the input areas
       smallTextInput.setEditable(true);
       enumInput3.setEditable(true);
       smallTextInput3.setEditable(true);
       smallTextInput4.setEditable(true);
       smallTextInput5.setEditable(true);
       smallTextInput6.setEditable(true);

       // Can not edit the entries of the enumeration box
       enumInput.setEditable(false);
       enumInput2.setEditable(false);

       // make all the fields visisble
       setInputVisisble();

       okButton.setEnabled(true);

    }

     /**
      * Computes a Date from a MM/YY date
      * @param expire
      * @return
      * @throws BadInputException
      */
     public Date returnExpiration(String expire) throws BadInputException {
         GregorianCalendar gc;
         // takes a MM/YY date and returns it as a Date
         if (!expire.matches("\\d\\d.\\d\\d"))
             throw new BadInputException ("Bad expiration date entered");
         if (Integer.parseInt(expire.substring(0, 2))>11)
             throw new BadInputException ("Bad expiration date entered");
         gc=new GregorianCalendar(Integer.parseInt(expire.substring(3, 5)),
                 Integer.parseInt(expire.substring(0, 2)),0);
         return gc.getTime();
     }


     /**
      * Code to implement the GUI for returning vehicles
      * This is a little tricky because it needs to be able to handel the damage report as will
      */
    public void setupReturnVehicleAction (boolean fromDamage) {

        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                String vin=null;
                double rentalCharge = 0;
                try {
                    int inYear = year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    int inYearE=year1.getSelectedIndex();
                    int inMonthE=month1.getSelectedIndex();
                    Date returnDate=null;
                    Date expire=null;
                    vin = (String) enumInput.getSelectedItem();
                    Double endMileage=Double.valueOf(smallTextInput.getText().trim());
                    Double gasAdded=Double.valueOf(smallTextInput4.getText());
                    String cCName = (String) enumInput3.getSelectedItem();
                    String cCnumber=smallTextInput3.getText().trim();
                    double damageCost=0;
                    String damageDescription=(String)smallTextInput5.getText();
                    Vehicle workVehicle=null;
                    Bill newBill=null;

                    CreditCard currentCard=null;
                    NumberFormat cfmt=NumberFormat.getCurrencyInstance();

                    if (inYear==-1 || inDay ==-1 || inMonth==-1 || inYearE == -1 || inMonthE == -1)
                        throw new BadInputException("All date values must be enteed");

                    returnDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    expire=getSelectedDate((Integer)year1.getItemAt(inYearE),(Integer) month1.getItemAt(inMonthE),1);

                    if (!fleet.vehicleIdExists(vin.trim())) throw new BadInputException ("Bad Vin "+ vin);
                    if (fleet.getVehicle(vin.trim()).getCurrentMilage()> endMileage && endMileage != 0)
                        throw new BadInputException ("Bad start Mileage (less than current Mileage) " + endMileage);

                    // store the just recieved information
                    workVehicle=fleet.getVehicle(vin.trim());

                    // a silly test but needed in case the code changes
                    if (!workVehicle.checkStatus(VehicleStatus.RENTED))
                        throw new BadInputException ("Vehicle not currently out for rent\n");

                    // deal with damage report
                    if (smallTextInput6!=null) {
                        damageCost = Double.valueOf(smallTextInput6.getText().trim());
                        if (damageCost>0.009) {
                            damageDescription = (String) smallTextInput5.getText().trim();
                            damageReport = new CostReport(returnDate, damageDescription, damageCost);
                        } else {
                            damageCost=0.0;
                        }
                    }

                    // deal with corperate credit cards
                    if (enumInput3.getSelectedIndex() >0) {
                        // State using corperate credit card
                        displayMessage("Paying with Corperate Credit Card \n"+cCName+" "+
                                CreditCard.formatCreditCardNumber(cCnumber)+"\n");
                        // validate that the company and number exist on 1 card
                        if (!fleet.corperateCardExists(cCName, cCnumber)) {
                            throw new BadInputException ("Corperate Card does not exist for Company "+
                                    cCName +" and Card Number " + CreditCard.formatCreditCardNumber(cCnumber)
                                    +"\n");
                        }
                        // change cCName to customer name
                        String custName=(String) enumInput3.getItemAt(0);
                        if (custName.length()<3 || custName.equalsIgnoreCase("Enter Card Holder Name"))
                            throw new BadInputException("Must enter valid Credit Card Holder Name in the top" +
                                    "location of this box\nNot "+custName+"\n");
                        CreditCard tc = fleet.getCorperateCreditCard(cCName, cCnumber, custName);
                        cCName=tc.getName();
                        expire=tc.getExpire();
                    } else {
                        // State using personal credit card
                        displayMessage("Paying with personal Credit Card\n");
                    }

                    currentCard=new CreditCard(cCName, cCnumber, expire);
                    newBill=workVehicle.createBill(returnDate, endMileage, gasAdded, damageCost);

                    rentalCharge=workVehicle.calculateRentalFee(newBill, fleet.getMileageAllowance(),
                            fleet.getMileageRate(), fleet.getGasRate());

                    // display bill
                        displayBill(newBill, workVehicle, fleet.getMileageAllowance(), fleet.getMileageRate(), fleet.getGasRate());

                    // charge credit card
                    if (! showValidCreditCard(currentCard,rentalCharge))
                        throw new CanNotValidateCreditCardException ("Credit Card invalid for charge of "
                                + cfmt.format(rentalCharge));

                    // clean up the rental
                    workVehicle.finishRental(newBill,damageReport);

                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                    fail=true;
                } catch (CanNotValidateCreditCardException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                    fail=true;
                } catch (CanNotChangeStatusException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                    fail=true;
                } catch (NumberFormatException errorString) {
                    displayError("Damage Cost, Phone and Mileage must only include numbers  \n" + errorString+"\n",Color.ORANGE);
                    fail=true;
                }

                if (!fail) {
                    NumberFormat nFmt = NumberFormat.getCurrencyInstance();
                    if (damageReport !=null) {
                        displayMessage("Returned damaged vehicle "+vin
                                +" with a total charge of "+nFmt.format(rentalCharge)+"\n");
                        damageReport = null;
                    } else {
                        displayMessage("Returned vehicle "+vin
                                +" with a total charge of "+rentalCharge+"\n");
                    }
                    for (ActionListener aL:enumInput.getActionListeners())
                        enumInput.removeActionListener(aL);
                    damageReport=null;
                    returningVehicle=false;
                    setupCancelAction();
                }
            }
        };

        // fill in current Mileage and the CreditCard information
        ActionListener vehicleSelectAction= new ActionListener() {

         public void actionPerformed(ActionEvent e) {
             String mileage=null;
             CreditCard myCC=null;
             Vehicle myVehicle=null;
             Date cExpire=null;
             String vin=null;
             GregorianCalendar gC=new GregorianCalendar();

             // if a vehicle is selected
             if (enumInput.getSelectedIndex() != -1 ) {
                 vin =(String)enumInput.getSelectedItem();
                 myVehicle=fleet.getVehicle(vin.trim());
                 mileage=String.format("%8.2f",myVehicle.getCurrentMilage());
                 smallTextInput.setText(mileage);
                // textConsol.setText("Current Mileage is : "+ mileage);

                 myCC=myVehicle.getCurrentRental().getCustomer().getCreditCard();
                 enumInput3.insertItemAt(myCC.getName(),0);
                 smallTextInput3.setText(myCC.getNumber());
                 cExpire = myCC.getExpire();
                 gC.setTime(cExpire);
                 
                 month1.setSelectedIndex(gC.get(Calendar.MONTH));
                 year1.setSelectedItem(gC.get(Calendar.YEAR));

                 cExpire = myVehicle.getCurrentRental().getStartDate();
                 gC.setTime(cExpire);
                 day.setSelectedIndex(gC.get(Calendar.DATE));
                 month2.setSelectedIndex(gC.get(Calendar.MONTH));
                 year2.setSelectedItem(gC.get(Calendar.YEAR));

             } else {
                 displayError("No vehcile selected\n",Color.RED);
             }

            }
        };

       // disable the controll buttons but leave Add Damage Report available
       disableControlSelection();
//       returnDamagedButton.setEnabled(true);
       if (!fromDamage) damageReport=null;
       returningVehicle=true;

       // make all the input boxes Invisible
       setInputInvisisble();

       // set the input labeles
         // set the input labeles
         smallTextLabel.setText("Mileage");
         smallTextLabel2.setText("Credit Name / Company");
         smallTextLabel3.setText("Credit Card Number");
         smallTextLabel4.setText("Gas Added");
        smallTextLabel5.setText("Damage Description");
         smallTextLabel6.setText("Damage Cost");
         monthLabel1.setText("Expire");
         yearLabel1.setText("/");
         dayLabel.setText("Return");
         monthLabel2.setText("/");
         yearLabel2.setText("/");


         // clear all input fields
         smallTextInput.setText("");
         smallTextInput3.setText((""));
         smallTextInput4.setText(("0.0"));
         smallTextInput5.setText((""));
         smallTextInput6.setText(("0.0"));
        setDataSelected();

        // remove old values in the enumInput
        enumInput.removeAllItems();
        enumInput3.removeAllItems();
        // load all rented vehicles in the with the vin if rented
        for (Vehicle v : fleet.getVehicles()) {
           if (v.checkStatus(VehicleStatus.RENTED))
               enumInput.addItem(v.getVehicleId());
        }

       // Add action to fill in the starting Mileage, CredirCard information
        enumInput.addActionListener(vehicleSelectAction);

        enumInput3.addItem("Enter Card Holder Name");
        for (CreditCard cc : fleet.getCorperateCardList()) {
           boolean found=false;
           for (int i =0;i<enumInput3.getItemCount();i++) {
               if (cc.getName().equalsIgnoreCase((String)enumInput3.getItemAt(i)))
                   found=true;
           }
           if (!found) {
               enumInput3.addItem(cc.getName());
           }
       }
       enumInput3.setEditable(true);

       // get selection from datatable if exists and is relavant
         enumInput.setEditable(false);
       if (dataTable.getSelectedRow() != -1) {
           String vin = (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
           enumInput.setSelectedItem(vin.trim());
       }

       // set the okay action
       okButton.setText("Finish Return");
       // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
       // the cancel buuton always clears the boxes and exists without saving

       // set editable for all the input areas
       smallTextInput.setEditable(true);
       enumInput3.setEditable(true);
       smallTextInput3.setEditable(true);
       smallTextInput4.setEditable(true);

       // Can not edit the entries of the enumeration box
       enumInput.setEditable(false);
       enumInput2.setEditable(false);

       // make all the fields visisble
       setInputVisisble();
        enumInput2.setVisible(false);
        enumLabel2.setVisible(false);

       okButton.setEnabled(true);
    }

    /**
     * Gui to display revenue Report
     */
    public void setupRevenueReport () {
        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                try {
                    int inYear = year2.getSelectedIndex();
                    int inDay=day.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    int inYearE=year1.getSelectedIndex();
                    int inMonthE=month1.getSelectedIndex();
                    int inDayE=sday2.getSelectedIndex();
                    Date endDate=null;
                    Date startDate=null;

                    if (inYear==-1 || inDay ==-1 || inMonth==-1 || inYearE == -1 || inMonthE == -1 || inDayE ==-1)
                        throw new BadInputException("All date values must be enteed");

                    endDate=getSelectedDate((Integer)year2.getItemAt(inYear),(Integer) month2.getItemAt(inMonth),
                            (Integer)day.getItemAt(inDay));
                    startDate=getSelectedDate((Integer)year1.getItemAt(inYearE),
                            (Integer) month1.getItemAt(inMonthE),(Integer) sday2.getItemAt(inDayE));

                    dataTable.setModel(new FleetRevenueTableModel(fleet.getVehicles(), startDate, endDate));
                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                    fail=true;
                } catch (NumberFormatException errorString) {
                    displayError("Dates must only have numbers in thsm  \n" + errorString+"\n",Color.PINK);
                    fail=true;
                }

            }
        };

        ActionListener monthlyAction = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                boolean fail = false;
                try {
                    int inYear = year2.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    Date endDate=null;
                    int month=-1;
                    int year=0;
                    GregorianCalendar gdate=null;
                    Date startDate=null;

                    // set the start and end end date - only need the start the end
                    // is the next month less 1 day (last day of this month)
                    if (inYear==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be entered\n");

                    year=(Integer)year2.getItemAt(inYear);
                    month=(Integer) month2.getItemAt(inMonth);
                    startDate=getSelectedDate(year,month,1);

                    gdate=new GregorianCalendar(year,month-1,1);
                    gdate.add(GregorianCalendar.MONTH,1);
                    gdate.add(GregorianCalendar.DATE, -1);
                    endDate=gdate.getTime();
//                    dataTable.setModel(new FleetRevenueTableModel(fleet.getVehicles(), startDate, endDate));
                    String report=fleet.getMonthlyRevenue(year,month);
                    // display report
                    displayInfo(report);
                    report="<HTML>"+report+"</HTML>";
                    report=report.replaceAll("\n", "<br>");
                    dataTable.setRowHeight(normalHeight*15);
                    dataTable.setModel(new MonthlyRevenueTableModel(month,year,report));
                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                    fail=true;
                } catch (NumberFormatException errorString) {
                    displayError("Dates must only have numbers in thsm  \n" + errorString+"\n",Color.PINK);
                    fail=true;
                } catch (SQLException errorString) {
                    displayError("Error in data retrieval\n"+errorString+"\n",Color.PINK);
                    fail=true;
                } catch (BadDatabaseInsertException errorString) {
                    displayError ("Error storing newly generated reports\n"+errorString+"\n",Color.pink);
                    fail = true;
                }

                if (fail==false) {
                //    otherButton.setVisible(false);
                //    otherButton.setEnabled(false);
                //    for(ActionListener al: otherButton.getActionListeners()) {
                //        otherButton.removeActionListener(al);
                //    }
                }

            }
        };

        //Clear off the Control functions
        disableControlSelection();

        // make all inputs invisible
        setInputInvisisble();

        //Configure labels
        sdayLabel.setText("Start Date");
        sdayLabel.setText("End Date( Monthly Date");
        monthLabel2.setText("/");
        monthLabel1.setText("/");

        // Make both point to today
        setDataSelected();

        // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);
   //     otherButton.addActionListener(monthlyAction);

        // make these inputs visible
        sday2.setVisible(true);
        sdayLabel.setVisible(true);
        month1.setVisible(true);
        monthLabel1.setVisible(true);
        year1.setVisible(true);
        yearLabel1.setVisible(true);
        day.setVisible(true);
        dayLabel.setVisible(true);
        month2.setVisible(true);
        monthLabel2.setVisible(true);
        year2.setVisible(true);
        yearLabel2.setVisible(true);

  //      otherButton.setVisible(true);
  //      otherButton.setEnabled(true);
  //      otherButton.setText("Monthly Report");
        okButton.setEnabled(true);
    }

     /**
     * Gui to display the Vehicle Report
     */
    public void setupVehicleReport () {
        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                try {

                   
                    Vehicle report = null;
                    String vin = (String) enumInput2.getSelectedItem();

                    if (! fleet.vehicleIdExists(vin.trim()))
                        throw new BadInputException("Vehicle not found in fleet "+vin);
                    report=fleet.getVehicle(vin.trim());
                    dataTable.setModel(new VehicleReportTableModel(report));
                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                } catch (NumberFormatException errorString) {
                    displayError("Bad number convertion\n" + errorString+"\n",Color.ORANGE);
                }
            }
        };

        //Clear off the Control functions
        disableControlSelection();

        // make all inputs invisible
        setInputInvisisble();

        //Configure label;
        enumLabel2.setText("Vin for Report");
        //RAJ ADDED --> Would keep date into in vehicle report field.....
        sdayLabel.setText("Start Date");
        sdayLabel.setText("End Date( Monthly Date");
        monthLabel2.setText("/");
        monthLabel1.setText("/");

        // Make both point to today
        setDataSelected();
        // RAJ ENDED. see raj added above


       // remove old values in the enumInput
       enumInput2.removeAllItems();
       // load all possible vehicles in the enum box
       for (Vehicle v: fleet.getVehicles()) {
               enumInput2.addItem(v.getVehicleId().trim());
       }

       // select the enumInput2 element that is the same as selected in dataTable
       enumInput2.setEditable(false);
       if (dataTable.getSelectedRow() != -1) {
           String vin = (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
           enumInput2.setSelectedItem(vin.trim());
       }
             // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);

        // make these inputs visible
        // RAJ ADDED
        sday2.setVisible(true);
        sdayLabel.setVisible(true);
        month1.setVisible(true);
        monthLabel1.setVisible(true);
        year1.setVisible(true);
        yearLabel1.setVisible(true);
        day.setVisible(true);
        dayLabel.setVisible(true);
        month2.setVisible(true);
        monthLabel2.setVisible(true);
        year2.setVisible(true);
        yearLabel2.setVisible(true);
        // RAJ ENDED, see RAJ ADDED ABOVE
        enumInput2.setVisible(true);
        enumLabel2.setVisible(true);

        okButton.setEnabled(true);
    }

     /**
     * Gui to display the Vehicle Report
     */
    public void setupMonthlyVehicleReport () {
        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int month = -1;
                int year = 0;
                String vin=null;
                try {
                    vin = (String) enumInput2.getSelectedItem();
                    int inYear = year2.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    Date endDate=null;

                    GregorianCalendar gdate=null;
                    Date startDate=null;

                    // set the start and end end date - only need the start the end
                    // is the next month less 1 day (last day of this month)
                    if (inYear==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be entered\n");

                    year=(Integer)year2.getItemAt(inYear);
                    month=(Integer) month2.getItemAt(inMonth);
                    startDate=getSelectedDate(year,month,1);

                    gdate=new GregorianCalendar(year,month-1,1);
                    gdate.add(GregorianCalendar.MONTH,1);
                    gdate.add(GregorianCalendar.DATE, -1);
                    endDate=gdate.getTime();

                    if (! fleet.vehicleIdExists(vin.trim()))
                        throw new BadInputException("Vehicle not found in fleet "+vin);
                    String report=fleet.getMonthlyVehicle(vin.trim(),year,month);

                    // display report
                    displayInfo(report);
                    report="<HTML>"+report+"</HTML>";
                    report=report.replaceAll("\n", "<br>");
                    dataTable.setRowHeight(normalHeight*15);
                    dataTable.setModel(new MonthlyRevenueTableModel(month,year,report));
                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                } catch (NumberFormatException errorString) {
                    displayError("Bad number convertion\n" + errorString+"\n",Color.ORANGE);
                } catch (SQLException errorString){
                    displayError("Problem retriving data\nVin - "+ vin +" year - "+ year +" month - "+ month
                            +"\n"+errorString+"\n",Color.ORANGE);
                }catch (BadDatabaseInsertException errorString){
                    displayError("Problem stroing data\nVin - "+ vin +" year - "+ year +" month - "+ month
                            +"\n"+errorString+"\n",Color.ORANGE);
                }
            }
        };

        //Clear off the Control functions
        disableControlSelection();

        // make all inputs invisible
        setInputInvisisble();

        //Configure label;
        enumLabel2.setText("Vin for Report");

        //Configure labels
        monthLabel2.setText("Month Requested");

       // remove old values in the enumInput
       enumInput2.removeAllItems();
       // load all possible vehicles in the enum box
       for (Vehicle v: fleet.getVehicles()) {
               enumInput2.addItem(v.getVehicleId().trim());
       }

             // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);

        // make these inputs visible
        enumInput2.setVisible(true);
        enumLabel2.setVisible(true);
        month2.setVisible(true);
        monthLabel2.setVisible(true);
        year2.setVisible(true);
        yearLabel2.setVisible(true);

        okButton.setEnabled(true);
    }

        /**
     * Gui to display the Vehicle Report
     */
    public void setupMonthlyRevenueReport () {
        // When the "ok" button is pushed process information and get credit card information
        ActionListener okAction = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int month = -1;
                int year = 0;
                try {
                    int inYear = year2.getSelectedIndex();
                    int inMonth=month2.getSelectedIndex();
                    Date endDate=null;

                    GregorianCalendar gdate=null;
                    Date startDate=null;

                    // set the start and end end date - only need the start the end
                    // is the next month less 1 day (last day of this month)
                    if (inYear==-1 || inMonth==-1)
                        throw new BadInputException("All date values must be entered\n");

                    year=(Integer)year2.getItemAt(inYear);
                    month=(Integer) month2.getItemAt(inMonth);
                    startDate=getSelectedDate(year,month,1);

                    gdate=new GregorianCalendar(year,month-1,1);
                    gdate.add(GregorianCalendar.MONTH,1);
                    gdate.add(GregorianCalendar.DATE, -1);
                    endDate=gdate.getTime();

                    String report=fleet.getMonthlyRevenue(year,month);

                    // display report
                    displayInfo(report);
                    report="<HTML>"+report+"</HTML>";
                    report=report.replaceAll("\n", "<br>");
                    dataTable.setRowHeight(normalHeight*15);
                    dataTable.setModel(new MonthlyRevenueTableModel(month,year,report));
                } catch (BadInputException errorString) {
                    displayError("Error bad input value "+ errorString+"\n",Color.PINK);
                } catch (NumberFormatException errorString) {
                    displayError("Bad number convertion\n" + errorString+"\n",Color.ORANGE);
                } catch (SQLException errorString){
                    displayError("Problem retriving data\n year - "+ year +" month - "+ month
                            +"\n"+errorString+"\n",Color.ORANGE);
                }catch (BadDatabaseInsertException errorString){
                    displayError("Problem stroing data\nyear - "+ year +" month - "+ month
                            +"\n"+errorString+"\n",Color.ORANGE);
                }
            }
        };

        //Clear off the Control functions
        disableControlSelection();

        // make all inputs invisible
        setInputInvisisble();

        //Configure labels
        monthLabel2.setText("Month Requested");

             // clear ok action listeners
       for(ActionListener al: okButton.getActionListeners())
           okButton.removeActionListener(al);
       // add the addVehicle action listener
       okButton.addActionListener(okAction);

        // make these inputs visible
        month2.setVisible(true);
        monthLabel2.setVisible(true);
        year2.setVisible(true);
        yearLabel2.setVisible(true);

        okButton.setEnabled(true);
    }
    /**
     * Displays the bill in the vehicle table window
     * @param bill bill to be displayed
     * @param mileageAllowance number of free miles per day
     * @param mileageRate cost of excess miles
     * @param gasRate cost of gas filled after rental
     */
    public void displayBill(Bill bill,Vehicle workVehicle,double mileageAllowance,double mileageRate,double gasRate) {
        dataTable.setModel(new BillTableModel(bill,workVehicle,mileageAllowance,mileageRate,gasRate));
    }


    public boolean showValidCreditCard(CreditCard currentCard, double rentalCharge) {
        NumberFormat fmt=NumberFormat.getCurrencyInstance();
        String output="Validating Credit Card of " + currentCard.getName()+"\n";
        String moreOutput=" for "+ fmt.format(rentalCharge)+"\n";
        String responce="   Validate Credit Card\n";
        String output_s=output + moreOutput + responce;
        int selection=JOptionPane.showConfirmDialog(null,output_s,"Validate Credit Card",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (selection == JOptionPane.YES_OPTION) {
            ccResponse=true;
        } else {
            ccResponse=false;
        }

        // display message in consolText

        displayMessage(output_s +"Accepted "+ccResponse);

        return ccResponse;
    }

    public void dbSaveFleet() throws BadDatabaseInsertException, SQLException, BadInputException {
        
        // store the vehilce types
        for (VehicleType vt: fleet.getVehicleType()) {
            database.store(vt);
        }
        
        // store the vehicles
        for (Vehicle v: fleet.getVehicles()) {
                database.store(v);
        }

        // sync the credit cards
        database.syncCreditCards(fleet.getCorperateCardList());
    }
    
    /**
     * Show a simple infortation message
     * @param inMessage the message to display
     */
    public void displayInfo (String inMessage) {
        textConsol.setText(inMessage);
        textConsol.setBackground(Color.white);
    }
    
    /**
     * Append and display message
     * @param inMessage the message to display
     */
    public void displayMessage(String inMessage) {
        messages.append(inMessage);
        textConsol.setText(messages.toString());
        textConsol.setBackground(Color.white);
    }

    /**
     * Append, dispkay an error message, and set background colour
     * @param errorMessage the message to append and display
     * @param errorColour the colour to set the background of the display
     */
    public void displayError (String errorMessage,Color errorColour) {
        displayMessage(errorMessage);
        textConsol.setBackground(errorColour);
    }

/**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VehicleFleet testfleet=new VehicleFleet();
                GregorianCalendar gC = new GregorianCalendar(2009, 1, 12);
//                database=new dbConnection();
                try {
                    database.dbconnect();
//                    testfleet.setVehicles(database.getFleet());
                    testfleet.fillFleet(database);

//   //         testfleet.addVehicle("J4YT527GH6283LD", VehicleType.COMPACT2DOOR, 3005.00);
//                    Vehicle car1 = testfleet.getVehicle("J4YT527GH6283LD");
//                    CostReport c1 = new CostReport(gC.getTime(), "Oil Change", 25.49);
//                    car1.addService(c1);
//   //         testfleet.addVehicle("MHJ689HDG683JG7", VehicleType.COMPACT2DOOR, 1284.00);
//                    car1 = testfleet.getVehicle("MHJ689HDG683JG7");
//                    gC.set(2998, 0, 22);
//                    CostReport c2 = new CostReport(gC.getTime(), "Oil Change1", 26.49);
//                    car1.addService(c2);
//                    //        testfleet.addVehicle("J73GJ7GH62738GU", VehicleType.COMPACT2DOOR, 7865.00);
//                    car1 = testfleet.getVehicle("J73GJ7GH62738GU");
//                    gC.set(2009, 2, 2);
//                    CostReport c3 = new CostReport(gC.getTime(), "Oil Change2", 24.49);
//                    car1.addService(c3);
//                    gC.set(2008, 9, 14);
//                    CostReport d1 = new CostReport(gC.getTime(), "Scartch under right rear-view mirror", 3.00);
//                    car1.addDamageReport(d1);
                } catch (BadInputException e) {

                }catch (SQLException sqlerror) {
                    System.out.println("SqlError " + sqlerror);
                    int selection= JOptionPane.showConfirmDialog(null, "Error in SQL" +sqlerror);
//                } catch (CanNotChangeStatusException e) {
//
                }
                new TestGui(testfleet).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVehicleButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JComboBox day;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JComboBox enumInput;
    private javax.swing.JComboBox enumInput2;
    private javax.swing.JComboBox enumInput3;
    private javax.swing.JLabel enumLabel;
    private javax.swing.JLabel enumLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea largeTextInput;
    private javax.swing.JComboBox month1;
    private javax.swing.JComboBox month2;
    private javax.swing.JLabel monthLabel1;
    private javax.swing.JLabel monthLabel2;
    private javax.swing.JButton okButton;
    private javax.swing.JButton otherButton;
    private javax.swing.JButton rentButton;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton returnDamagedButton;
    private javax.swing.JButton returnServiceButton;
    private javax.swing.JButton revenueButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox sday2;
    private javax.swing.JLabel sdayLabel;
    private javax.swing.JTextField smallTextInput;
    private javax.swing.JTextField smallTextInput3;
    private javax.swing.JTextField smallTextInput4;
    private javax.swing.JTextField smallTextInput5;
    private javax.swing.JTextField smallTextInput6;
    private javax.swing.JLabel smallTextLabel;
    private javax.swing.JLabel smallTextLabel2;
    private javax.swing.JLabel smallTextLabel3;
    private javax.swing.JLabel smallTextLabel4;
    private javax.swing.JLabel smallTextLabel5;
    private javax.swing.JLabel smallTextLabel6;
    private javax.swing.JEditorPane textConsol;
    private javax.swing.JButton vehicleStatusButton;
    private javax.swing.JComboBox year1;
    private javax.swing.JComboBox year2;
    private javax.swing.JLabel yearLabel1;
    private javax.swing.JLabel yearLabel2;
    // End of variables declaration//GEN-END:variables

    private VehicleFleet fleet;
    private double gDamageCost = 0;          // the current damge coses
    private boolean ccResponse = false;       // the credit card responce
    private boolean returningVehicle=false;   // state variable for the user returning a vehicle
    private CostReport damageReport;         // the current damage report
    private Map<String,String> returnBackUp=null;    // the backup need to restore the gui to a previous state
    private List<ActionListener> okActions=null;   // be prepared to backup the okActions
    private static dbConnection database= new dbConnection();
    private StringBuilder messages= new StringBuilder();
    private int normalHeight=20;
}
