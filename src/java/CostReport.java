import java.util.Date;
import java.text.NumberFormat;
import java.text.DateFormat;
import javax.persistence.*;
import java.io.*;


// <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
// #[regen=yes,id=DCE.66723AAE-5EEA-D104-1270-F9F97DDF0926]
// </editor-fold>
/**
 * CostReport holds the information on damage and service for vehicles
 * attributes accessible through getX() are -
 * date - the reference date for the object - must exist
 * description - the narative of why the report exists ie "oil change" - must exist
 * cost - the cost associated with the report must be 0 or greater
 *
 * @author Raj
 */
@Entity
public class CostReport implements Serializable, Comparable {

    @Id @GeneratedValue
    private Long hId;                               // the primary id for the database generated by db
@ManyToOne
@JoinColumn(name="vehicleHId")
    private Vehicle vehicle;

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.DD2CC8A0-7DCA-77B7-FA55-CDD317E4A1C1]
    // </editor-fold>
    @Temporal(TemporalType.DATE)
    @Column(nullable=false,name="return_date")
    private Date date;                              // Date the vehicle is returned from service

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.570AB648-CE69-46AC-4DEF-3079D96820F4]
    // </editor-fold>
    @Column(nullable=false)
    private String description;                     // What was done to the vehicle

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.C71D7BEB-B463-1645-A53F-C484C2CAA743]
    // </editor-fold>
    @Column(nullable=false)
    private Double cost;                            // What was the cost of the service or damage

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.01E0FBEC-406E-D3EF-11C0-923EF8E73A82]
    // </editor-fold> 
    protected CostReport () {
        //exists only for hibernate
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.8997B900-C30C-C4CC-2AA3-75974D0B5F3E]
    // </editor-fold>
    /**
     * Constructor with checking of inputs.
     * 1. ensures that the cost are not negative
     * 2. ensures that the description exists
     * 3. ensures that there is a date
     *
     * @param date reference data for the report
     * @param description what the cosr report is about
     * @param cost the charges related to the report
     * @throws BadInputException - on badly formated and missing input
     */
    public CostReport (Date date, String description, Double cost) throws BadInputException {
        // ensure that the cost is greater than 0
        if (cost <0) throw new BadInputException("Cost of service or damage < 0 :" + cost);

        // ensure that there is a description for the report
        if (description == null || description.length()< 3)
            throw new BadInputException ("Report requires a description");

        // ensure that there is a date
        if (date == null) throw new BadInputException("Date returned needs to be recorded");

        this.date=date;
        this.cost=cost;
        this.description=description;
        this.hId=-1L;
    }

    /**
     * the database version of the constructor
     * @param date
     * @param description
     * @param cost
     * @param hId
     * @throws BadInputException
     */
    public CostReport(Date date, String description, Double cost, long hId) throws BadInputException {
        this(date,description,cost);
        this.hId=hId;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.A837E2C1-0654-9AEF-0ACE-3B4746A9D83C]
    // </editor-fold> 
    public Double getCost () {
        return cost;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.465D4B05-F1DC-B51C-8114-DAE2403148B7]
    // </editor-fold> 
    protected void setCost (Double val) {
        this.cost = val;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.21A961DE-6913-7B4C-3EDC-081B3BA01D56]
    // </editor-fold> 
    public Date getDate () {
        return date;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.7609919A-13AC-6FDE-3632-C18E2666EF7E]
    // </editor-fold> 
    protected void setDate (Date val) {
        this.date = val;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.53C9F6A0-F1B0-4EB0-C9F2-CB5A77C50F69]
    // </editor-fold> 
    public String getDescription () {
        return description;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,regenBody=yes,id=DCE.877D052B-DC78-D0E0-8795-E8F7324F599F]
    // </editor-fold> 
    protected void setDescription (String val) {
        this.description = val;
    }

    // <editor-fold defaultstate="collapsed" desc=" UML Marker "> 
    // #[regen=yes,id=DCE.41B33944-8686-2FD5-B1F4-C3BE787C18BD]
    // </editor-fold> 
    public String getReport () {
        return this.toString();
    }

    // meant only for the database to use
    public void setDbId(long id) {
        this.hId=id;
    }
    public long getDbId () {
        return hId;
    }


    @Override
    public String toString() {
        NumberFormat cf=NumberFormat.getCurrencyInstance();
        DateFormat df=DateFormat.getDateInstance(DateFormat.MEDIUM);
        String out=String.format(df.format(this.date)+" "+ description +" Cost " + cf.format(this.cost));

       return out;
    }

    @Override
    /**
     * Implmentation of the Comparable interface
     * only good for CostReport Ohjects
     **/
    public int compareTo (Object o) {
        if ( o instanceof CostReport) {
            CostReport cR=(CostReport)o;
            return this.date.compareTo(cR.getDate());
        }
    throw new ClassCastException();
    }
}

